<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mengduan</title>
      <link href="/2023/03/01/mengduan/"/>
      <url>/2023/03/01/mengduan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mengduan</title>
      <link href="/2023/03/01/My%20course%20design/"/>
      <url>/2023/03/01/My%20course%20design/</url>
      
        <content type="html"><![CDATA[<p>#include&lt;stdio.h&gt;<br>#include &lt;stdbool.h&gt;<br>#include &lt;time.h&gt;<br>#include&lt;math.h&gt;<br>#include &lt;stdlib.h&gt;<br>&#x2F;&#x2F;#include&lt;process.h&gt;</p><p>struct person{<br>    char name[2];&#x2F;&#x2F;  姓名<br>    int aa;&#x2F;&#x2F; 人员编号<br>    int age;&#x2F;&#x2F;  年龄<br>&#x2F;&#x2F;char address[20];&#x2F;&#x2F;家庭住址<br>};<br>struct Node{<br>    struct person data;<br>    struct Node* next;<br>};<br>&#x2F;&#x2F;创建链表<br>struct Node* createList(){<br>    struct Node* headNode &#x3D; (struct Node*)malloc(sizeof(struct Node));<br>    headNode-&gt;next &#x3D; NULL;<br>    return headNode;<br>}</p><p>struct Node* createNode(struct person data){<br>    struct Node* newNode &#x3D; (struct Node*)malloc(sizeof(struct Node));<br>    newNode-&gt;data &#x3D; data;<br>    newNode-&gt;next &#x3D; NULL;<br>    return newNode;<br>}</p><p>void insertNode(struct Node* headNode){<br>    struct person info;<br>    struct Node* r&#x3D;headNode;<br>    FILE <em>pf &#x3D; fopen(“person.txt”,”r”);<br>    if (pf &#x3D;&#x3D; NULL){<br>        printf(“打开文件失败\n”);<br>        fclose(pf);<br>        pf &#x3D; NULL;<br>    } else{<br>        for (int i&#x3D;0;i&lt;7;i++){<br>        fscanf(pf,”%s%d%d”,&amp;info.name,&amp;info.aa,&amp;info.age);<br>&#x2F;&#x2F;         fscanf(pf,”%c”,&amp;info.name);<br>&#x2F;&#x2F;         fscanf(pf,”%d”,&amp;info.aa);<br>&#x2F;&#x2F;         fscanf(pf,”%d”,&amp;info.age);<br>&#x2F;&#x2F;         fscanf(pf,”%s”,&amp;info.address);<br>&#x2F;&#x2F;         fscanf(w,”%s”,”\r\n”);<br>            struct Node* newNode &#x3D; createNode(info);<br>            r-&gt;next&#x3D;newNode;<br>            r &#x3D; newNode;<br>        }<br>        fclose(pf);<br>    }<br>}<br>&#x2F;&#x2F;输出<br>void printfList(struct Node</em> headNode){<br>    struct Node* pMove &#x3D; headNode-&gt;next;<br>    while (pMove){<br>        printf(“姓名:”);<br>        printf(“%s \n”,pMove-&gt;data.name);<br>        printf(“人员编号:”);<br>        printf(“%d \n”,pMove-&gt;data.aa);<br>        printf(“年龄:”);<br>        printf(“%d \n”,pMove-&gt;data.age);<br>&#x2F;&#x2F;        printf(“家庭住址:”);<br>&#x2F;&#x2F;        printf(“%s”, pMove-&gt;data.address);<br>        printf(“\n”);<br>        pMove &#x3D; pMove-&gt;next;<br>    }<br>    printf(“\n”);<br>}<br>const int N&#x3D;10;</p><p>void swap(int a, int b) {<br>    int m;<br>    m &#x3D; a;<br>    a &#x3D; b;<br>    b &#x3D; m;<br>}<br>int l &#x3D; 0;<br>int rest[N][N];&#x2F;&#x2F;这个人的休息日<br>int arr[N] &#x3D; {0,1,2,3,4,5,6,7};&#x2F;&#x2F;这个人的星期<br>bool vis[N];&#x2F;&#x2F;星期几是否用过</p><p>void dfs(int n) {<br>    if (n &#x3D;&#x3D; 7&amp;&amp;l&lt;3) {<br>        l++;<br>        printf(“Solution: %d\n”, l);<br>        printf(“钱     赵     孙     李     周     吴     陈 \n”);<br>        printf(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; \n”);</p><pre><code>    for (int i = 1; i &lt;= 7; i++) &#123;            if (arr[i] == 1) &#123;                printf(&quot;星期一 &quot;);                            &#125;            else if (arr[i] == 2) &#123;                printf(&quot;星期二 &quot;);                            &#125;            else if (arr[i] == 3) &#123;                printf(&quot;星期三 &quot;);                            &#125;            else if (arr[i] == 4) &#123;                printf(&quot;星期四 &quot;);                            &#125;            else if (arr[i] == 5) &#123;                printf(&quot;星期五 &quot;);                            &#125;            else if (arr[i] == 6) &#123;                printf(&quot;星期六 &quot;);                            &#125;            else if (arr[i] == 7) &#123;                printf(&quot;星期日 &quot;);                            &#125;            &#125;    if (n == 7) &#123;        printf(&quot;\n\n\n\n\n&quot;);                        return ;    &#125;    for (int i = 1; i &lt;= 7; i++) &#123; // 第几个人         for (int j = 1; j &lt;= 7; j++) &#123;            if (!rest[i][j]) &#123;                return ;                            &#125;            if (rest[i][j] == arr[i]) &#123;                                break;            &#125;            else if (rest[i][j] != arr[i]) &#123;                                continue;            &#125;        &#125;    &#125;        &#125;else if (n &lt; 7) &#123;    for (int i = n; i &lt;= 7; i++) &#123;</code></pre><p>&#x2F;&#x2F;if(vis[i]&#x3D;&#x3D;0){<br>&#x2F;&#x2F;continue;<br>&#x2F;&#x2F;}<br>            int k &#x3D; arr[n];&#x2F;&#x2F; 星期<br>            arr[n] &#x3D; arr[i];&#x2F;&#x2F; 第几个人<br>            arr[i] &#x3D; k;<br>&#x2F;&#x2F;vis[i]&#x3D;1;<br>            dfs(n + 1);</p><pre><code>        arr[i] = arr[n];        arr[n] = k;</code></pre><p>&#x2F;&#x2F;vis[i]&#x3D;0;<br>        }<br>    }</p><pre><code>return ;</code></pre><p>}</p><p>int main(){<br>    printf(“请输入保安姓名 编号 年龄 :\n”);<br>&#x2F;&#x2F;char filename[50];<br>&#x2F;&#x2F;    printf(“please input filename: “);<br>&#x2F;&#x2F;    scanf(“%s”, filename);<br>&#x2F;&#x2F;    Create();<br>&#x2F;&#x2F;    save(filename);<br>&#x2F;&#x2F;    free(phead);<br>&#x2F;&#x2F;    show(filename); <br>    struct Node* list &#x3D; createList();<br>    insertNode(list);&#x2F;&#x2F;建立链表<br>    printfList(list);&#x2F;&#x2F;输出链表 </p><pre><code>//规则 printf(&quot;\n&quot;);printf(&quot;1.请按照钱、赵、孙、李、周、吴、陈 的顺序输入他们认为合适的休息日的数字\n&quot;);printf(&quot;2.其中数字1代表星期一，数字2代表星期二，以此类推\n&quot;);printf(&quot;星期与星期之间要用空格隔开，输入完一个人的休息日后要输入0，才能到下一个人\n&quot;);printf(&quot;\n&quot;);int i;int j;for ( i = 1; i &lt;= 7; i++) &#123;    if (i == 1) &#123;        printf(&quot;请输入钱保安的理想休息日：\n&quot;);            &#125;    else if (i == 2) &#123;        printf(&quot;请输入赵保安的理想休息日：\n&quot;);            &#125;    else if (i == 3) &#123;        printf(&quot;请输入孙保安的理想休息日：\n&quot;);            &#125;    else if (i == 4) &#123;        printf(&quot;请输入李保安的理想休息日：\n&quot;);            &#125;    else if (i == 5) &#123;        printf(&quot;请输入周保安的理想休息日：\n&quot;);            &#125;    else if (i == 6) &#123;        printf(&quot;请输入吴保安的理想休息日：\n&quot;);            &#125;    else if (i == 7) &#123;        printf(&quot;请输入陈保安的理想休息日：\n&quot;);            &#125;    for (int j = 1; j &lt;= 7; j++) &#123;        int m;        scanf(&quot;%d&quot;,&amp;m);        if (m == 0) &#123;            break;        &#125;        rest[i][j] = m;    &#125;                        &#125;dfs(1);return 0;</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/01/hello-world/"/>
      <url>/2023/03/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
